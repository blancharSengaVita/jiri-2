// FONTFACE
@font-face {
    font-family: "Lato";
    src: url('../../fonts/Lato-Regular.ttf') format("truetype");
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: "Lato";
    src: url('../../fonts/Lato-Medium.ttf') format("truetype");
    font-weight: 500;
    font-style: normal;
}

@font-face {
    font-family: "Lato";
    src: url('../../fonts/Lato-Semibold.ttf') format("truetype");
    font-weight: 600;
    font-style: normal;
}

//  COLOR
$background-color: #FFF9F3;
$secondary-background-color: #FFD7B1;
$nav-color: #FFD7B1;
$app-color: #FF6100;
$contact-card-color: #FFE9D5;
$primary-font-color: Black;
$white-font-color: White;
$menu-title-color: #656565;
$menu-link-active-color:#FFF9F3;
$table-row-color: #CCCCCC;
$table-color: #535453;


//  SPACER
$xs-spacer: 4px;
$s-spacer: 8px;
$m-spacer: 16px;
$l-spacer: 24px;
$xl-spacer: 32px;
$xxl-spacer: 40px;
$xxxl-spacer: 48px;

//  AUTRE
$auth-form-max-width: 400px;
$auth-form-background-color: white;
$nav-width: 250px;


//  FONT
@mixin font {
    font-family : Lato, sans-serif;
    font-weight: 400;
}

@mixin medium {
    font-family : Lato, sans-serif;
    font-weight: 500;
}

@mixin semiBold {
    font-family : Lato, sans-serif;
    font-weight: 600;
}

@mixin h1 {
    @include medium;
    font-size: 1.625rem;
}

@mixin h2 {
    @include medium;
    font-size: 1.25rem;
}

@mixin h3 {
    @include medium;
    font-size: 1.125rem;
}

@mixin p {
    @include font;
    font-size: 1rem;
}

@mixin tinyText {
    @include font;
    font-size: 0.75rem;
}

@mixin a {
    text-decoration: underline;
    color: #005CE7;
}

@mixin cardBackground {
    background-color: $auth-form-background-color;
    padding: 1rem;
    box-shadow: 0 1px 2px rgba(00, 00, 00, 0.10);
    border-radius: 10px;
}

@mixin input{
    padding-inline: 1rem;
    padding-block: 0.5rem;
    border-color: #FFD7B1;
    border-style: solid;
    border-radius: 5px;
    border-width: 2px;
    font-size: 1rem;
    box-shadow: 0 0.25px 1px 0.25px rgba(00, 00, 00, 0.10);
}

@mixin field {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: 0.5rem;
    margin-block-end: 1rem;
}

@mixin button(){
    color: white;
    cursor: pointer;
    background-color: #FF6100;
    padding-block: 0.625rem;
    padding-inline: 0.625rem;
    border-radius: 10px;
    border-width: 0;
    font-size: 1rem;
    text-decoration: none;
}

@mixin svgIcon(){
    width: 20px;
    height: 20px;
    color: $app-color;
    //stroke: $app-color;
    //stroke-width: 0.5px;
    filter: drop-shadow(0px 0.25px .25px rgb(0 0 0 / 0.25));
}

@mixin resetButton {
    border: none;
    margin: 0;
    padding: 0;
    width: auto;
    overflow: visible;

    background: transparent;

    /* inherit font & color from ancestor */
    color: inherit;
    font: inherit;

    /* Normalize `line-height`. Cannot be changed from `normal` in Firefox 4+. */
    line-height: normal;

    /* Corrects font smoothing for webkit */
    -webkit-font-smoothing: inherit;
    -moz-osx-font-smoothing: inherit;

    /* Corrects inability to style clickable `input` types in iOS */
    -webkit-appearance: none;

    /* Remove excess padding and border in Firefox 4+ */
    &::-moz-focus-inner {
        border: 0;
        padding: 0;
    }
}


// VAR FOR MEDIA QUERIES
$maxWidthPhone: 380px;
$maxWidthLargePhone: 767px;
$maxWidthLargeTablet: 1220px;
$maxWidthLargeLaptop: 1800px;

$breakpoints: (
    'phone': (max-width: calc(30rem)), //480px
    'large-phone': (min-width: calc(30rem + 1px)), //481px
    'tablet': (min-width: calc(48rem - 1px)), // //767px
    'large-tablet': (min-width: calc(60rem)), // //960px
    'laptop': (min-width: 80rem), //1280px
    'large-laptop': (min-width: 100rem), //1600px
    'desktop': (min-width: 120rem) //1920px
) !default;


@mixin mq($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }
        // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}
